<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>log_uri = environment_get_variable("APPDATA");
log_uri = string_replace(log_uri, "Roaming", "LocalLow\Wizards Of The Coast\MTGA\output_log.txt");

show_debug_message("Log: "+log_uri);
show_debug_message("WD: "+working_directory);


log_size = 0;
log_size_prev = 0;
str = "";

averages = ds_list_create();
average = 0;

demand_update = false;

jsontime[0] = 0;
jsontime[1] = 0;
jsontime[2] = 0;
jsontime[3] = 0;
jsontime[4] = 0;
jsontime[5] = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>file = sb_file_bin_open(log_uri, 0);
prev_size = log_size;
log_size = sb_file_bin_size(file);

if log_size != prev_size &amp;&amp; prev_size &gt; 0 {
    sb_file_bin_seek(file, prev_size);
    str = "";
    pos = prev_size;
    while (pos &lt; log_size) {
        add = sb_file_bin_read_string(file)
        str += add;
        pos += string_length(add);
    }
}

sb_file_bin_close(file);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;5; i++) {
    var t = jsontime[i];
    jsontime[i] = tween(t, t, 0, delta);
}

if get_timer() &lt; 1000000
    exit;
if !arena_is_running()
    exit;
if !file_exists_ns(log_uri)
    exit;

file = sb_file_bin_open(log_uri, 0);
prev_size = log_size;
log_size = sb_file_bin_size(file);

if prev_size == 0 || demand_update {
    var lookfor, endswith, pos, str, final_str, verybigstr;
    reset_timer();
    
    copy = file_copy_ns(log_uri, working_directory+"output_log.txt");
    status = nsfs_get_status()
    buffer = buffer_load(working_directory+"output_log.txt");
    verybigstr = buffer_read(buffer, buffer_string);
    
    // Get PID
    if controller_obj.player_id == "" &amp;&amp; demand_update != 2 {
        lookfor = "GetAccountInfo("; endswith = ")";
        pos = string_pos(lookfor, verybigstr);
        if pos == 0 {
            controller_obj.player_id = "";
            show_debug_message("Get PID failed");
        }
        else {
            pos += string_length(lookfor);
            final_str = string_copy(verybigstr, pos, 50);
            final_str = string_copy(final_str, 0, string_pos(endswith, final_str)-1);    
            show_debug_message("UID: "+final_str);
            controller_obj.player_id = final_str;
        }
    }
    
    // WebSocketClient {
    if controller_obj.player_name == "" &amp;&amp; demand_update != 2 {
        lookfor = '"PlayerScreenName":"'; endswith = '"';
        pos = string_pos(lookfor, verybigstr);
        if pos != 0 {
            pos += string_length(lookfor);
            final_str = string_copy(verybigstr, pos, 100);
            final_str = string_copy(final_str, 0, string_pos(endswith, final_str)-1);     
            show_debug_message("&gt; Get name: "+string(pos))
            controller_obj.player_name = final_str;
            mtga_process_json(final_str)
        }
    }
    
    if controller_obj.auth_token = "" &amp;&amp; controller_obj.player_id != "" &amp;&amp; controller_obj.player_name != "" {
        http_auth();
    }
    
    // GetPlayerCardsV3 {
    if demand_update == 2 {
        lookfor = 'PlayerInventory.GetPlayerCardsV3 {'; endswith = '(Filename:';
        pos = string_pos(lookfor, verybigstr);
        if pos != 0 {
            //pos += string_length(lookfor);
            final_str = string_copy(verybigstr, pos, string_length(verybigstr));
            final_str = string_copy(final_str, 0, string_pos(endswith, final_str)-1);     
            show_debug_message("&gt; Get inventory: "+string(pos));
            //clipboard_set_text(final_str);
            mtga_process_json(final_str);
        }
    }
    
    // Deck.GetDeckLists [
    if demand_update == 3 {
        lookfor = 'Deck.GetDeckLists ['; endswith = '(Filename:';
        pos = string_rpos(lookfor, verybigstr);
        if pos != 0 {
            final_str = string_copy(verybigstr, pos, string_length(verybigstr));
            final_str = string_copy(final_str, 0, string_pos(endswith, final_str)-1);     
            clipboard_set_text(final_str);
            mtga_process_json(final_str);
        }
    }
    
    // ZONES
    /*
    if demand_update == 4 {
        lookfor = ''; endswith = '(Filename:';
        pos = string_rpos(lookfor, verybigstr);
        if pos != 0 {
            final_str = string_copy(verybigstr, pos, string_length(verybigstr));
            final_str = string_copy(final_str, 0, string_pos(endswith, final_str)-1);     
            clipboard_set_text(final_str);
            mtga_process_json(final_str);
        }
    }
    */
    
    // Get Rank 
    if demand_update == false {
        lookfor = "Event.GetCombinedRankInfo {"; endswith = "(Filename:";
        pos = string_rpos(lookfor, verybigstr);
        if pos != 0 {
            pos -=1;
            final_str = string_copy(verybigstr, pos, 2000);
            final_str = string_copy(final_str, 0, string_pos(endswith, final_str)-1);     
            show_debug_message("&gt; Rank info: "+string(pos))
            mtga_process_json(final_str);
        }
    }
    
    demand_update = false;
    buffer_delete(buffer);
    show_debug_message(string(debug_timer()/1000000)+" s");;
    main_menu.filestream = 1;
}
if log_size != prev_size &amp;&amp; prev_size &gt; 0 {
    if prev_size &gt; log_size {
        prev_size = log_size;
        exit;
    }
    sb_file_bin_seek(file, prev_size);
    str = "";
    pos = prev_size;
    
    reset_timer();
    
    copy = file_copy_ns(log_uri, working_directory+"output_log.txt");
    buffer = buffer_load(working_directory+"output_log.txt");
    buffer_seek(buffer,  buffer_seek_start, pos);
    str = buffer_read(buffer, buffer_string);
    //clipboard_set_text(str);
    buffer_delete(buffer);

    mtga_process_data(str);
    
    kb = (log_size-prev_size)/1024; r = debug_timer()/1000000; kbs = 1 / r * kb;
    ds_list_add(averages, kbs); average = 0; var size = ds_list_size(averages) for (i=0; i&lt;size; i+=1) { average += ds_list_find_value(averages, i); } average = average/size;
    //show_debug_message("Average speed: "+string(average)+" Kb/s");
    main_menu.filestream = 1;
    
    if ds_list_size(averages) &gt; 300 {
        ds_list_clear(averages);
        log_size = 0;
        prev_size = 0;
    }  
    
    var clear_at = saved_data[? "clear_log"];
    if clear_at == 0 &amp;&amp; log_size/1024/1024 &gt; 25 {
        sb_file_bin_rewrite(file);
        show_debug_message(" &gt; output_log.txt cleared at "+string(log_size/1024/1024)+"mb");
    }
    if clear_at == 1 &amp;&amp; log_size/1024/1024 &gt; 50 {
        sb_file_bin_rewrite(file);
        show_debug_message(" &gt; output_log.txt cleared at "+string(log_size/1024/1024)+"mb");
    }
    if clear_at == 2 &amp;&amp; log_size/1024/1024 &gt; 75 {
        sb_file_bin_rewrite(file);
        show_debug_message(" &gt; output_log.txt cleared at "+string(log_size/1024/1024)+"mb");
    }
}

sb_file_bin_close(file);

/*
while (pos &lt; log_size) {
    str += chr(sb_file_bin_read_byte(file));
    pos += 1;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_12);
draw_set_colour(c_black);
draw_set_halign(fa_left);

draw_text(16, 16, "&gt; "+string(log_size));
draw_text(16, 32, string_copy(str, 0, 1000));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
