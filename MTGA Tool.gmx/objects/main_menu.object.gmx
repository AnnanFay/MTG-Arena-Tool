<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>main_menu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar setting_alwaysontop;
setting_alwaysontop = true;

globalvar mtgahandle;
mtgahandle = 0;
alarm[0] = 1;

al[0] = 1;
al[1] = 1;
al[2] = 1;
al[3] = 1;
al[4] = 1;
al[5] = 1;

opt[0] = "Decks"
opt[1] = "History"
opt[2] = "Explore"
opt[3] = "Inventory"
opt[4] = "Settings"
opt[5] = "About"

top_decks = ds_list_create();

view_deck = -1;
total_main = 0;
total_side = 0;
view_match = -1;
selected = 1;
sidew = 200;
toph = 72;

// Variables declarations
offset = 0;
height = 0;
dragy = 0;
sidebar_alpha = 0;
mouse_yprevious = mouse_y;
mouse_ypressed = mouse_y;
pressed = -1;
released = 1000000;

//
filestream = 0;
upstream   = 0;
downstream = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mtgahandle = window_find("UnityWndClass", "MTGA");
alarm[0] = 30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>filestream = tween(filestream, filestream, 0, delta*0.1);

if (mouse_check_button_pressed(mb_left) &amp;&amp; mouse_y &gt; toph) {
    mouse_yprevious = mouse_y;
    mouse_ypressed = mouse_y;
}

if (mouse_check_button(mb_left) &amp;&amp; mouse_yprevious &gt; toph) {
    dragy = mouse_y-mouse_yprevious;
    sidebar_alpha = 5;
}
else {
    dragy *= 0.85;// Slow it down if we are not pressing anything
    sidebar_alpha = max(0, sidebar_alpha-0.05);// Fade out the sidebar
}

if mouse_wheel_down() {
    dragy -= 16;
    sidebar_alpha = 5;
}
if mouse_wheel_up() {
    dragy += 16;
    sidebar_alpha = 5;
}

offset += dragy;
mouse_yprevious = mouse_y;

/*
 Here we take care we are not moving the offset too high or too low
 making the items stay always inside the view 
*/
if (offset &gt; 0)
    offset = 0;
if (height &gt; view_hview-toph) {
    if (offset &lt; -height+view_hview-toph)
        offset = -height+view_hview-toph;
}
else
    offset = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
if controller_obj.mode &gt; -1 {
    draw_sprite(stretch_spr, 0, view_wview, view_hview);
    exit;
}

sc = max(1, (view_wview - sidew) / 928, (view_hview - toph) / 720);
bx = sidew+((view_wview-sidew)/2);
by = toph+((view_hview-toph)/2);
draw_sprite_ext(background_spr, 0, bx, by, sc, sc, 0, c_white, 1);

// Center stuff
draw_set_halign(fa_center);
if !arena_is_running() {
    draw_set_color(color_red);
    draw_set_font(font_24);
    draw_text(bx, by, "Open MtG Arena");
}
else if !file_exists_ns(parser_obj.log_uri) {
    draw_set_halign(fa_center);
    draw_set_color(color_red);
    draw_set_font(font_24);
    draw_text(bx, by-20, "Log file not found");

    
    draw_set_font(font_12);
    but = button_rectangle_simple(bx-64, by-16+32, bx+64, by+16+32);
    if but == 2 {
        var path = get_open_filename("Arena Log file|output_log.txt", parser_obj.log_uri);
        show_debug_message("&gt; "+string(path));
        if file_exists_ns(path) &amp;&amp; path != "" {
            parser_obj.log_uri = path;
        }
    }
    draw_set_halign(fa_center);
    draw_sprite(but_normal_spr, but, bx, by+32);
    draw_set_color(color_dark);
    draw_text(bx, by+32, "Find manually");
}
else {
    // Draw the rest
    if selected == 0 {
        draw_decks();
    }
    if selected == 1 {
        draw_history();
    }
    if selected == 2 {
        draw_explore();
    }
    if selected == 3 {
        draw_inventory();
    }
    if selected == 4 {
        draw_settings();
    }
    if selected == 5 {
        draw_about();
    }
}

// Draw the position indicator bar on the right
bar_pos = ((view_hview-toph-4)/height) * offset*-1;
bar_hei = ((view_hview-toph-4)/height) * (view_hview-toph-4)
draw_set_color(color_light);
draw_set_alpha(sidebar_alpha);
draw_roundrect(view_xview+view_wview-10, view_yview+toph+2+bar_pos, view_xview+view_wview-2, view_yview+toph+2+bar_pos+bar_hei, 0);


draw_sprite_ext(side_bar_spr, 0, 0, 0, 1, view_hview/32, 0, c_white, 1);
// Side bar stuff
draw_set_font(font_16);
draw_set_halign(fa_left);
draw_set_color(color_white);
yy = toph+64;

//
for (i=0; i&lt;6; i++) {
    but = button_rectangle_simple(12, yy-23, 188, yy+23)
    if but {
        al[i] = tween(al[i], 0, 1, 0.05);
        if but == 2 {
            selected = i;
            view_deck = -1;
            view_match = -1;
            scroll = 0;
        }
    }
    else if selected != i {
        al[i] = tween(al[i], 1, 0.5, 0.05);
    }
    
    draw_set_alpha(al[i]);
    draw_text(24, yy, opt[i]);
    yy += 48;
}
draw_set_alpha(0.5);
draw_rectangle_color(0, view_hview-32, 200, view_hview, c_black, c_black, c_black, c_black, 0);
draw_sprite(hdd_icon_spr, 0, 16, view_hview-16);
draw_set_font(font_10);
draw_set_color(color_white);
draw_set_alpha(filestream);
draw_text(32, view_hview-16, string(parser_obj.average)+" kb/s");

draw_set_alpha(1);
draw_sprite_ext(top_bar_spr, 0, 0, 0, view_wview/32, 1, 0, c_white, 1);
// Top bar stuff
if arena_is_running() {
    draw_set_color(color_blue);
    draw_set_font(font_14);
    draw_set_halign(fa_left);
    draw_text(36, toph/2, controller_obj.player_name);

    ii = get_rank_index(controller_obj.con_rank, controller_obj.con_tier);    
    
    xx =  80 + string_width(controller_obj.player_name);
    if controller_obj.player_name = ""
        xx = 48;
    
    draw_sprite_ext(ranks_spr, ii, xx, toph/2, 1, 1, 0, c_white, 1)
    
    draw_set_color(color_dark);
    draw_line_width(xx-24, toph - 12, xx+24, toph - 12, 3);
    draw_set_color(color_light);
    draw_line_width(xx-24, toph - 12, xx-24+(48/100*controller_obj.con_prog), toph - 12, 3);
    
    xx += 48;
    
    draw_set_color(color_white);
    draw_set_font(font_12);
    draw_text(xx, toph/2-14, "Win Streak: "+string(controller_obj.con_stre));
    draw_text(xx, toph/2+14, "Win Rate: "+string(100/(controller_obj.con_wins+controller_obj.con_loss)*controller_obj.con_wins)+"%");

/*
draw_text(view_wview/2, view_yview+15, "Stats");
draw_set_font(font_10);    
draw_text(view_wview/2, view_yview+50, "Rank: "+string(rank)+" "+string(tier));

*/

}

xx = view_wview - toph/2;
yy = toph/2;
but = button_rectangle_simple(xx-12, yy-12, xx+12, yy+12)
draw_sprite(but_close_spr, but, xx, yy);
if but == 4 {
    game_end();
}

xx -= toph;
but = button_rectangle_simple(xx-12, yy-12, xx+12, yy+12)
draw_sprite(but_min_spr, but, xx, yy);
if but == 4 {
    window_set_minimized(controller_obj.handle, true)
}

draw_sprite(stretch_spr, 0, view_wview, view_hview);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
