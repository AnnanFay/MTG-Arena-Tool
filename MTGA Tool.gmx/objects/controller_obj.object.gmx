<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>controller_obj</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar server_api_url;
//server_api_url = "http://mtgatool.ddns.net/tracker_api.php";
server_api_url = "http://mtgatool.ddns.net/api.php";

globalvar delta;
delta = 1;

fade = 255;
fade_to = 255;


mode = -1;
view_mode = 0;

con_rank = "-";
con_tier = 0;
con_prog = 0;
con_stre = 0;
con_wins = 1;
con_loss = 0;

lim_rank = "-";
lim_tier = 0;
lim_prog = 0;
lim_stre = 0;
lim_wins = 1;
lim_loss = 0;

deck_costs = "";


active_deck = "";
game_winner = -1;
current_decklist = ds_map_create();
current_decklist_remaining = ds_map_create();
current_decklist_size = 0;
current_deck_land = 0;
current_deck_nonland = 0;
//decks = ds_list_create();

globalvar cards_db, sets_cards, sets_completion, player_history, player_data, matches, setsizestr, decks_stats;
player_data = ds_map_create();
ds_map_add_list(player_data, "decks", ds_list_create());

cards_db = ds_map_create();
player_history = ds_map_create();
ds_map_add_list(player_history, "matches", ds_list_create());

decks_stats = ds_map_create();
matches = ds_map_create();
/*
add_akh();
add_hou();
add_xln();
add_rix();
add_dar();
*/
sets_all();

globalvar setsizestr;
setsizestr = '{"total":0, "common":0, "uncommon":0, "rare":0, "mythic":0}';
sets_cards = ds_map_create();
sets_completion = ds_map_create();

var i, cs, cr, set, num, sz, key;
key = ds_map_find_first(cards_db);
sz = ds_map_size(cards_db);
for (i=0; i&lt;sz; i++) {
    cs = get_card_data(key, 1);
    cr = get_card_data(key, 5);
    
    if sets_cards[? cs] == undefined {
        sets_cards[? cs] = json_decode(setsizestr);
        sets_completion[? cs] = json_decode(setsizestr);
    }
    
    if cr != "land" &amp;&amp; cr != "token" {
        set = sets_cards[? cs];
        ds_map_replace(set, "total", set[? "total"] + 1);
        ds_map_replace(set, cr, set[? cr] + 1);
    }
    key = ds_map_find_next(cards_db, key);
}

dragx = undefined;
dragy = undefined;
handle = -1;
alarm[0] = 1;

prev_pid = "";
player_id = "";
player_name = "";
player_seatid = 0;
objsinplay = ds_list_create();

opponent_rank = "";
opponent_tier = -1;
opponent_name = "";
opponent_pid = "";
opponent_seatid = 0;

globalvar saved_data;
if file_exists("save") {
    saved_data = ds_map_secure_load("save");
}
else {
    create_save();
}

current_version = real(string_digits(GM_version));
latest_version = -1;
latest_version_link = "";
latest_version_code = "";

auth_token = "";
async_submit = ds_list_create();
async_request = undefined;
async_url = "";

action_log = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fade_to = 255;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>decks = player_data[? "decks"];
savejson = ds_map_create();
var _p = ds_map_create();
var _o = ds_map_create();
var _d = ds_list_create();
var _s = ds_list_create();
_seen = ds_list_create();

_p[? "id"] = player_id;
_p[? "name"] = player_name;
ds_map_add_list(_p, "deck", _d);
ds_map_add_list(_p, "side", _s);
_p[? "rank"] = con_rank;
_p[? "tier"] = con_tier;
_p[? "seat"] = player_seatid

_o[? "id"]   = opponent_pid;
_o[? "name"] = opponent_name;
_o[? "rank"] = opponent_rank;
_o[? "tier"] = opponent_tier;
_o[? "seat"] = opponent_seatid;
ds_map_add_list(_o, "cards", _seen);

ds_map_add_map(savejson, "player", _p);
ds_map_add_map(savejson, "opponent", _o);
savejson[? "timestamp"] = unix_timestamp();
savejson[? "id"] = match_id;

if game_winner == player_seatid 
    savejson[? "winner"] = "player";
if game_winner == opponent_seatid
    savejson[? "winner"] = "opponent";

var decksn = ds_list_size(decks);
for (dd=0; dd&lt;decksn; dd++) {
    _deck = ds_list_find_value(decks, dd);
    
    _main = _deck[? "mainDeck"];
    _side = _deck[? "sideboard"];
    _deckid = _deck[? "id"];

    if _deckid == active_deck {
        savejson[? "deck_colors"] = _deck[? "colorIdentity"];
        savejson[? "deck_name"] = _deck[? "name"];
        savejson[? "deck_id"] = _deck[? "id"];
        var size = ds_list_size(_main);
        var _card, _number, _m;
        for (cc=0; cc&lt;size; cc++) {
            _card = ds_list_find_value(_main, cc);
            _m = ds_map_create();
            _m[? "id"] = _card[? "id"];
            _m[? "quantity"] = _card[? "quantity"];
            ds_list_add(_d, _m);
            ds_list_mark_as_map(_d, ds_list_size(_d)-1);
        }
    }
}

with (gameobject) {
    var zn = ds_map_find_value(zones, zoneId);
    zn = zn[? "type"];
    if zn != "ZoneType_Limbo" &amp;&amp; zn != "ZoneType_Library" {
        
        if ownerSeatId != controller_obj.player_seatid {
            var sz, m;
            sz = ds_list_size(controller_obj._seen);
            added = false;
            for (i=0; i&lt;sz; i++) {
                m = ds_list_find_value(controller_obj._seen, i);
                if string(grpId) == m[? "id"] {
                    m[? "quantity"] = m[? "quantity"]+1;
                    added = true;
                }
            }
            if added = false {
                m = ds_map_create();
                m[? "id"] = string(grpId);
                m[? "quantity"] = 1;
                ds_list_add(controller_obj._seen, m);
                ds_list_mark_as_map(controller_obj._seen, ds_list_size(controller_obj._seen)-1);
            }
        }
    }
}

if game_winner == player_seatid || game_winner == opponent_seatid {
    with (gameobject) {
        instance_destroy();
    }
    ds_list_clear(objsinplay);
    ds_map_clear(current_decklist);
    ds_map_clear(current_decklist_remaining);
    current_decklist_size = 0;
    current_deck_land = 0;
    current_deck_nonland = 0;
}

str = json_encode(savejson);
//clipboard_set_text(str);

// Add deck to player's database
ds_map_secure_save(savejson, match_id);
if file_exists(player_id) {
    player_history = ds_map_secure_load(player_id);
}
list = player_history[? "matches"];
if ds_list_find_index(list, match_id) == -1 {
    ds_list_add(list, match_id);
}
ds_map_secure_save(player_history, player_id);
ds_map_clear(matches);
ds_map_clear(decks_stats);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Load this player's deck, history, stats, EVERYTHIN'
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_clear(current_decklist);
ds_map_clear(current_decklist_remaining);
current_decklist_size = 0;
current_deck_land = 0;
current_deck_nonland = 0;

decks = player_data[? "decks"];
var decksn = ds_list_size(decks);
for (dd=0; dd&lt;decksn; dd++) {
    _deck = ds_list_find_value(decks, dd);
    
    _main = _deck[? "mainDeck"];
    _side = _deck[? "sideboard"];
    _deckid = _deck[? "id"];   

    if _deckid == active_deck {
        var size = ds_list_size(_main);
        var _card, _number;
        for (cc=0; cc&lt;size; cc++) {
            _card = ds_list_find_value(_main, cc);
            _cid = _card[? "id"];
            _number = _card[? "quantity"];
            current_decklist_size += real(_number);
            ds_map_add(current_decklist, _cid, _number);
            ds_map_add(current_decklist_remaining, _cid, _number);
            
            var types = get_card_data(real(_cid), 2);
            if string_pos("Land", types) {
                current_deck_land+=_number;
            }
            else {
                current_deck_nonland+=_number;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>decks = player_data[? "decks"];
var decksn = ds_list_size(decks);
var _deck, _main, _side, dd, cc, _deckid, _cid, _colors, deck_costs, addc;


for (dd=0; dd&lt;decksn; dd++) {
    _deck = ds_list_find_value(decks, dd);
    
    _main = _deck[? "mainDeck"];
    _side = _deck[? "sideboard"];
    
    deck_sort(_main);
    deck_sort(_side);
    _deck[? "colorIdentity"] = deck_get_colors(_main, _side);
}

ds_map_clear(decks_stats);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>handle = window_find("YYGameMakerYY", "MTGA Tool");
if !window_exists(handle) {
    alarm[0] = 1;
}
else {
    show_debug_message(string(handle));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>delta = 1/1000000*delta_time;

ds_map_clear(current_decklist_remaining);
ds_map_copy(current_decklist_remaining, current_decklist);
current_decklist_remaining_size = current_decklist_size;

current_deck_land_left = current_deck_land;
current_deck_nonland_left = current_deck_nonland;
with (gameobject) {
    var zn = ds_map_find_value(zones, zoneId);
    zn = zn[? "type"];
    if !is_undefined(zn) {
        if zn != "ZoneType_Limbo" &amp;&amp; zn != "ZoneType_Library" {
            if ds_map_exists(other.current_decklist, string(grpId)) &amp;&amp; ownerSeatId == controller_obj.player_seatid {
                other.current_decklist_remaining[? string(grpId)] -= 1;
                other.current_decklist_remaining_size -= 1;
                
                var types = get_card_data(real(grpId), 2);
                if string_pos("Land", types) {
                    other.current_deck_land_left -= 1;
                }
                else {
                    other.current_deck_nonland_left -= 1;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_list_size(async_submit) &gt; 0 &amp;&amp; async_request == undefined {
    post = ds_list_find_value(async_submit, 0);
    post = string_replace(post, "$$TKN$$", ab(auth_token));
    post += "&amp;orig="+string(auth_token);
    async_request = http_post_string(server_api_url, post);
    async_url = post;
    ds_list_delete(async_submit, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if setting_alwaysontop &amp;&amp; mode != -1 {
    window_set_topmost(true);
}
if fade != 255 {
    window_set_opacity(handle, fade);
    window_fix_opacity(handle);
}
fade = tween(fade, fade, fade_to, 5);
window_set_caption("MTGA Tool");

if mouse_check_button_pressed(mb_left) {
    if mouse_y &lt; 72 {
        dragx = window_get_x() - display_mouse_get_x();
        dragy = window_get_y() - display_mouse_get_y();
        drag = 1;
    }
    if mouse_x &gt; view_wview-24 &amp;&amp; mouse_y &gt; view_hview-24 {
        dragx = window_get_width() - window_mouse_get_x();
        dragy = window_get_height() - window_mouse_get_y();
        drag = 2;
    }
}
if dragx != undefined &amp;&amp; dragy != undefined {
    if drag == 1 {
        var xx = display_mouse_get_x() + dragx;
        var yy = display_mouse_get_y() + dragy;
        if xx &lt; 0
            xx = 0;
        if xx &gt; display_get_width() - window_get_width()
            xx = display_get_width() - window_get_width();
        if yy &lt; 0
            yy = 0;
        if yy &gt; display_get_height() - window_get_height()
            yy = display_get_height() - window_get_height();
        
        window_set_position(xx, yy);
    }
    if drag == 2 {
        var ww = round((window_mouse_get_x() + dragx) / 16) * 16;
        var hh = round((window_mouse_get_y() + dragy) / 8) * 8;
        
        window_set_size(ww, hh);
    }
    if mouse_check_button_released(mb_left) {
        if drag == 2 {
            surface_resize(application_surface, view_wport, view_hport);
        }
        dragx = undefined;
        dragy = undefined;
        drag = 0;
        
        if mode == 1 {
            saved_data[? "x"] = window_get_x();
            saved_data[? "y"] = window_get_y();
            saved_data[? "width"] = window_get_width();
            saved_data[? "height"] = window_get_height();
            save();
        }
    }
}

if view_wview != window_get_width() || view_hview != window_get_height() {
    if !window_get_minimized(handle) {
        view_wview = window_get_width();
        view_hview = window_get_height();
        view_wport = view_wview;
        view_hport = view_hview;
        surface_resize(application_surface, view_wport, view_hport);
        
        //surface_free(application_surface)
    }
}

if prev_pid != player_id &amp;&amp; prev_pid == "" {
    if file_exists(player_id) {
        player_history = ds_map_secure_load(player_id);
    }
}
prev_pid = player_id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var async_id     = ds_map_find_value(async_load, "id");
var async_status = ds_map_find_value(async_load, "status");
var async_result = ds_map_find_value(async_load, "result");

show_debug_message("htttp:  "+string(async_result));
//show_debug_message("AR:  "+string(async_request));
//show_debug_message("id:  "+string(async_id));
//show_debug_message("status:  "+string(async_status));

if async_id == async_request &amp;&amp; async_result != undefined {
    if async_status == 0 {
        json = json_decode(async_result);
        if json &gt; 0 {
            if json[? "ok"] != false {
                auth_token = string_lower(json[? "token"]);
                //show_debug_message("set token: "+string(auth_token))
                //
                if string_count("method=submit_course", async_url) {
                    ds_map_destroy(json);
                }
                else if string_count("method=get_top_decks", async_url) {
                    ds_list_copy(main_menu.top_decks, json[? "result"]);
                }
                else if string_count("method=get_version", async_url) {
                    latest_version = json[? "version"];
                    latest_version_link = json[? "link"];
                    latest_version_code = json[? "code"];
                    ds_map_destroy(json);
                }
            }
        }
    }
    async_request = undefined;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_halign(fa_left);
//draw_text(16, 16, player_id);

if keyboard_check_direct(vk_f1) {
    // Debug objects
    col = rgb(220, 210, 210);
    draw_rectangle_colour(-1, -1, view_wview+1, view_hview+1, col, col, col, col, 0)
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_font(font_10);
    var obj = ds_map_find_first(gameobjects)
    var instance, str;
    for (i=0; i&lt;ds_map_size(gameobjects); i++) {
        instance = ds_map_find_value(gameobjects, obj);
        if instance == undefined {
            str = string(obj)+" (Undefined)";
        }
        else if instance_exists(instance) {
            zz = string(instance.zoneId);
            if ds_map_exists(zones, instance.zoneId) {
                zz = ds_map_find_value(zones, instance.zoneId);
                zz = ds_map_find_value(zz, "type");
            }
            str = string(obj)+" ("+string(instance)+"): "+get_card_data(real(instance.grpId), 0)+" - "+zz+" - "+string(instance.ownerSeatId);
        }
        else {
            str = string(obj)+" ("+string(instance)+"): Deleted.";
        }
        draw_text(16, 32+(i*16), str);
        
        obj = ds_map_find_next(gameobjects, obj);
    }
    exit;
}


if mode == 1 {
    //sc = max(1, view_wview / 928, view_hview / 720);
    //col = rgb(230, 220, 210);
    //draw_rectangle_colour(-1, -1, view_wview+1, view_hview+1, col, col, col, col, 0)
    
    sc = max(1, view_wview / 928, view_hview / 720);
    bx = (view_wview/2);
    by = (view_hview/2);
    draw_sprite_ext(background_spr, 0, bx, by, sc, sc, 0, c_white, 1);
    draw_sprite_ext(top_bar_spr, 0, -1, -24, view_wview/32, 1, 0, c_white, 1); 
    
    
    var _x = view_wview - 24;
    var _y = 24;
    but = button_rectangle_simple(_x-12, _y-12, _x+12, _y+12)
    draw_sprite(but_close_spr, but, _x, _y);
    if but == 4 {
        opt = saved_data[? "close_overlay"];
        if opt == 0 {
            fade_to = 0;
            alarm[5] = 60*10;
        }
        if opt == 1 {
            fade_to = 0;
            alarm[5] = 60*20;
        }
        if opt == 2 {
            if fade_to == 255 fade_to = 51;
            else if fade_to == 51 fade_to = 102;
            else if fade_to == 102 fade_to = 153;
            else if fade_to == 153 fade_to = 204;
            else if fade_to == 204 fade_to = 255;
        }
        if opt == 3 {
            set_mode(-1);
        }
    }
    
    /*
    _x -= 48;
    but = button_rectangle_simple(_x-12, _y-12, _x+12, _y+12)
    draw_sprite(but_min_spr, but, _x, _y);
    if but == 4 {
        window_set_minimized(handle, true);
    }
    */

    deck_name = "";
    deck_main = undefined;
    deck_side = undefined;
    deck_colors = "";
    
    decks = player_data[? "decks"];
    var decksn = ds_list_size(decks);
    var _deck;
    for (i=0; i&lt;decksn; i++) {
        _deck = ds_list_find_value(decks, i);
        if _deck[? "id"] == active_deck {
            deck_name = _deck[? "name"];
            deck_main = _deck[? "mainDeck"];
            deck_side = _deck[? "sideboard"];
            if ds_map_exists(_deck, "colorIdentity") {
                deck_colors = _deck[? "colorIdentity"];
            }
            break;
        }
    }
    
    draw_set_halign(fa_center);
    draw_set_font(font_12);
    draw_set_color(color_white);
    draw_text(view_wview/2, 24, deck_name);
    draw_set_font(font_12);
    
    draw_mana_cost(deck_colors, view_wview/2, 72, 2, icons_16_spr);
    draw_sprite_ext(separator_spr, 0, view_wview/2, 96, 1, 1, 0, color_white, 0.5)
       
    yy = view_yview+120;
    
    but = button_rectangle_simple(view_wview/2-96-16, yy-10, view_wview/2-96+16, yy+10)
    if but == 2 {
        view_mode -= 1;
        if view_mode == -1 {
            view_mode = 3;
        }
    }
    draw_sprite_ext(change_spr, but, view_wview/2-96, yy, -1, 1, 0, c_white, 1);
    but = button_rectangle_simple(view_wview/2+96-16, yy-10, view_wview/2+96+16, yy+10)
    if but == 2 {
        view_mode += 1;
        if view_mode == 4 {
            view_mode = 0;
        }
    }
    draw_sprite_ext(change_spr, but, view_wview/2+96, yy, 1, 1, 0, c_white, 1);
    
    if ds_map_size(zones) == 0
        view_mode = 1;
    
    if view_mode == 0 {
        draw_text(view_wview/2, yy, "Left in deck");
    }
    if view_mode == 1 {
        draw_text(view_wview/2, yy, "Complete Deck");
    }
    if view_mode == 2 {
        draw_text(view_wview/2, yy, "Odds of drawing next");
    }
    if view_mode == 3 {
        draw_text(view_wview/2, yy, "Action Log");
    }
    
    yy += 32;
    
    draw_set_halign(fa_left);
    draw_set_font(font_12);
    if view_mode == 4 {
        var size = ds_list_size(action_log);
        maxh = view_hview - yy - 24;
        start = max(0, size - maxh/24);
        for (i=start; i&lt;size; i++) {
            str = ds_list_find_value(action_log, i);
            draw_text(32, yy, str);
            yy += 24
        }
    }
    else if deck_main != undefined {
        var size = ds_list_size(deck_main);
        var _card, _cid, _cost;
        for (i=0; i&lt;size; i++) {
            _card = ds_list_find_value(deck_main, i);
            _cid = real(_card[? "id"]);
            cardname = get_card_data( _cid, 0);
            number = _card[? "quantity"];
            _cost = get_card_data( _cid, 3)
            
            if view_mode == 0 {
                number = real(current_decklist_remaining[? string(_cid)]);
                if number &gt; 0 {
                    draw_set_font(font_12_b);
                    draw_text(4, yy, string(number));
                    draw_set_font(font_12);
                    draw_text(30, yy, string(cardname));
                    draw_mana_cost(_cost, view_wview - 16, yy, 1, icons_16_spr);
                    yy += 24;
                }
            }
            if view_mode == 1 {
                draw_set_font(font_12_b);
                draw_text(4, yy, string(number));
                draw_set_font(font_12);
                draw_text(30, yy, string(cardname));
                draw_mana_cost(_cost, view_wview - 16, yy, 1, icons_16_spr);
                yy += 24;
            }
            if view_mode == 2 {
                number = real(current_decklist_remaining[? string(_cid)]);
                var hyper;
                if number &gt; 0 {
                    hyper = hypergeometric(1, current_decklist_remaining_size, 1, number);
                    draw_set_font(font_10);
                    draw_text(4, yy, string(round(hyper*100))+"%");
                    draw_set_font(font_12);
                    draw_text(32, yy, string(cardname));
                    draw_mana_cost(_cost, view_wview - 16, yy, 1, icons_16_spr);
                    yy += 24;
                }
                
            }
        }
        if view_mode == 2 {
            yy += 8;
            hyper = hypergeometric(1, current_decklist_remaining_size, 1, current_deck_land_left);
            draw_set_halign(fa_left);
            draw_text(32, yy, "Odds of land:");
            draw_set_halign(fa_right);
            draw_text(view_wview-32, yy, string(round(hyper*100))+"%");
            yy += 24
            hyper = hypergeometric(1, current_decklist_remaining_size, 1, current_deck_nonland_left);
            draw_set_halign(fa_left);
            draw_text(32, yy, "Odds of nonalnd:");
            draw_set_halign(fa_right);
            draw_text(view_wview-32, yy, string(round(hyper*100))+"%");
        }
    }
    
    draw_sprite(stretch_spr, 0, view_wview, view_hview);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>controller_obj.fade_to = 0;
controller_obj.alarm[5] = 60*10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
